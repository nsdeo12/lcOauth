package main

import (
	"errors"
	"fmt"
	"time"
	//	"strconv"
	"encoding/json"

	"github.com/hyperledger/fabric/core/chaincode/shim"
)

var LCID = "LCID"

var logger = shim.NewLogger("mylogger")

type SimpleChaincode struct {
}

type LetterOfCredit struct {
	LcId                                string `json:"lcId"`
	LcRequestNumber                     string `json:"lcRequestNumber"`
	ImportSightPmtLCType_t1             string `json:"importSightPmtLCType_t1"`
	ApplicantID_t1                      string `json:"applicantID_t1"`
	ApplicantAddress_t1                 string `json:"applicantAddress_t1"`
	LCCurrency_t1                       string `json:"lCCurrency_t1"`
	LCAmount_t1                         string `json:"lCAmount_t1"`
	CreditTolerance_t1                  string `json:"creditTolerance_t1"`
	DebitTolerance_t1                   string `json:"debitTolerance_t1"`
	LCIssueDate_t1                      string `json:"lCIssueDate_t1"`
	ShipmentDate_t1                     string `json:"shipmentDate_t1"`
	LCExpiryDate_t1                     string `json:"lCExpiryDate_t1"`
	LiablityReversalDate_t1             string `json:"liablityReversalDate_t1"`
	PresentationDays_t1                 string `json:"presentationDays_t1"`
	LCExpiryPlace_t1                    string `json:"lCExpiryPlace_t1"`
	Placeofexpiry_t1                    string `json:"placeofexpiry_t1"`
	IncoTerms_t1                        string `json:"incoTerms_t1"`
	ModeOfShipment_t1                   string `json:"modeOfShipment_t1"`
	LimitReference_t1                   string `json:"limitReference_t1"`
	AutoExpiry_t1                       string `json:"autoExpiry_t1"`
	OtherOfficer_t1                     string `json:"otherOfficer_t1"`
	AccountOfficer_t1                   string `json:"accountOfficer_t1"`
	PortfolioApplicant_t1               string `json:"portfolioApplicant_t1"`
	PortfolioBeneficiary_t1             string `json:"portfolioBeneficiary_t1"`
	BeneficiaryID_t2                    string `json:"beneficiaryID_t2"`
	AdvisingThroughBank_t2              string `json:"advisingThroughBank_t2"`
	BeneficiaryAddress_t2               string `json:"beneficiaryAddress_t2"`
	AdvisingBankAddress_t2              string `json:"advisingBankAddress_t2"`
	AvailableWithBankID_t2              string `json:"availableWithBankID_t2"`
	AdvisingBankID_t2                   string `json:"advisingBankID_t2"`
	ReimbusingBank_t2                   string `json:"reimbusingBank_t2"`
	ChargesFrom_t3                      string `json:"chargesFrom_t3"`
	ChargeDefaultAcct_t3                string `json:"chargeDefaultAcct_t3"`
	ChargeCode_t3                       string `json:"chargeCode_t3"`
	PartyCharged_t3                     string `json:"partyCharged_t3"`
	ChargeDebitAcct_t3                  string `json:"chargeDebitAcct_t3"`
	ChargeCurrency_t3                   string `json:"chargeCurrency_t3"`
	ChargeExchangeRate_t3               string `json:"chargeExchangeRate_t3"`
	WaiveCharges_t3                     string `json:"waiveCharges_t3"`
	ChargeAmount_t3                     string `json:"chargeAmount_t3"`
	AmortiseCharges_t3                  string `json:"amortiseCharges_t3"`
	ChargeStatus_t3                     string `json:"chargeStatus_t3"`
	TaxCurrency_t3                      string `json:"taxCurrency_t3"`
	CommissionCode_t4                   string `json:"commissionCode_t4"`
	CommissionParty_t4                  string `json:"commissionParty_t4"`
	CommissionFrequency_t4              string `json:"commissionFrequency_t4"`
	CommissionRate_t4                   string `json:"commissionRate_t4"`
	AccrualParam_t4                     string `json:"accrualParam_t4"`
	CommissionAmount_t4                 string `json:"commissionAmount_t4"`
	FixedCommissionAmount_t4            string `json:"fixedCommissionAmount_t4"`
	CommissionAccount_t4                string `json:"commissionAccount_t4"`
	CommissionExchangeRate_t4           string `json:"commissionExchangeRate_t4"`
	CommissionClaimed_t4                string `json:"commissionClaimed_t4"`
	BackForward_t4                      string `json:"backForward_t4"`
	ReturnCommission_t4                 string `json:"returnCommission_t4"`
	SLRefTranche_t5                     string `json:"sLRefTranche_t5"`
	ProductType_t5                      string `json:"productType_t5"`
	BaseCcyRate_t5                      string `json:"baseCcyRate_t5"`
	Participator_t5                     string `json:"participator_t5"`
	PartShare_t5                        string `json:"partShare_t5"`
	PartAmount_t5                       string `json:"partAmount_t5"`
	SyndicateCharge_t5                  string `json:"syndicateCharge_t5"`
	OwnPartAmt_t5                       string `json:"ownPartAmt_t5"`
	BankToBankInfo_t5                   string `json:"bankToBankInfo_t5"`
	MT799Message_t5                     string `json:"mT799Message_t5"`
	MarginRequired_t6                   string `json:"marginRequired_t6"`
	MarginCalcBase_t6                   string `json:"marginCalcBase_t6"`
	MarginPercent_t6                    string `json:"marginPercent_t6"`
	MarginDebitAccount_t6               string `json:"marginDebitAccount_t6"`
	MarginAmount_t6                     string `json:"marginAmount_t6"`
	MarginExchangeRate_t6               string `json:"marginExchangeRate_t6"`
	MarginCreditAcct_t6                 string `json:"marginCreditAcct_t6"`
	LimitwithProvision_t6               string `json:"limitwithProvision_t6"`
	DrawingType_1_t7                    string `json:"drawingType_1_t7"`
	PaymentPercent_1_t7                 string `json:"paymentPercent_1_t7"`
	PaymentPortion_1_t7                 string `json:"paymentPortion_1_t7"`
	Acpt_timeBand_1_t7                  string `json:"acpt_timeBand_1_t7"`
	AddCoveredAmt_1_t7                  string `json:"addCoveredAmt_1_t7"`
	PortLimitRef_1_t7                   string `json:"portLimitRef_1_t7"`
	PortionOverdrawn_1_t7               string `json:"portionOverdrawn_1_t7"`
	RevolvingType_t7                    string `json:"revolvingType_t7"`
	NoofRevolutions_t7                  string `json:"noofRevolutions_t7"`
	RevolvingFqy_t7                     string `json:"revolvingFqy_t7"`
	LimitforRevolving_t7                string `json:"limitforRevolving_t7"`
	Cur_Revol_Liab_t7                   string `json:"cur_Revol_Liab_t7"`
	DocumentId_t8                       string `json:"documentId_t8"`
	DocumentsCode_1_t8                  string `json:"documentsCode_1_t8"`
	ADocumentsText_1_t8                 string `json:"aDocumentsText_1_t8"`
	ADocumentsRequired_t8               string `json:"aDocumentsRequired_t8"`
	AAdditionalConditions_1_t8          string `json:"aAdditionalConditions_1_t8"`
	MT700_1_20Docy_CreditNumber         string `json:"mT700_1_20Docy_CreditNumber"`
	MT700_1_23ReferencetoPreAdvice      string `json:"mT700_1_23ReferencetoPreAdvice"`
	MT700_1_31CDateofIssue              string `json:"MT700_1_31CDateofIssue"`
	MT700_1_40EApplicableRuleCodes      string `json:"mT700_1_40EApplicableRuleCodes"`
	MT700_1_31DDateofExpiry             string `json:"mT700_1_31DDateofExpiry"`
	MT700_1_31DPlaceofExpiry            string `json:"mT700_1_31DPlaceofExpiry"`
	MT700_1_51aADApplicantBank_1        string `json:"mT700_1_51aADApplicantBank_1"`
	MT700_1_50Applicant_1               string `json:"mT700_1_50Applicant_1"`
	MT700_1_59Beneficiary_1             string `json:"mT700_1_59Beneficiary_1"`
	MT700_1_32BCurrencyCode_Amount      string `json:"mT700_1_32BCurrencyCode_Amount"`
	MT700_1_39APercentgCrAmtTolerance   int    `json:"mT700_1_39APercentgCrAmtTolerance"`
	MT700_1_39APercentgDrAmtTolerance   int    `json:"mT700_1_39APercentgDrAmtTolerance"`
	MT700_1_39BMaximumCreditAmt         int    `json:"mT700_1_39BMaximumCreditAmt"`
	MT700_1_39CAddlAmountsCovered_1     int    `json:"mT700_1_39CAddlAmountsCovered_1"`
	MT700_1_41aAAvailableWith           string `json:"mT700_1_41aAAvailableWith"`
	MT700_1_41aDAvailablewith_1         string `json:"mT700_1_41aDAvailablewith_1"`
	MT700_1_AvailableBy                 string `json:"mT700_1_AvailableBy"`
	MT700_1_42CDraftsat_1               string `json:"mT700_1_42CDraftsat_1"`
	MT700_1_42aADraweeID                string `json:"mT700_1_42aADraweeID"`
	MT700_1_42aDDraweeName_1            string `json:"mT700_1_42aDDraweeName_1"`
	MT700_1_42MMixedPaymentDetails_1    string `json:"mT700_1_42MMixedPaymentDetails_1"`
	MT700_1_42PDeferredPaymentDetails_1 string `json:"mT700_1_42PDeferredPaymentDetails_1"`
	MT700_1_43PPartialShipments         string `json:"mT700_1_43PPartialShipments"`
	MT700_1_43TTranshipment             string `json:"mT700_1_43TTranshipment"`
	MT700_1_44APlaceofTakinginCharge    string `json:"mT700_1_44APlaceofTakinginCharge"`
	MT700_1_44EPortofLoading            string `json:"mT700_1_44EPortofLoading"`
	MT700_1_44FPortofDischarge          string `json:"mT700_1_44FPortofDischarge"`
	MT700_1_44BFinalDestination         string `json:"mT700_1_44BFinalDestination"`
	MT700_1_44CLatestDateofShipment     string `json:"mT700_1_44CLatestDateofShipment"`
	MT700_1_44DShipmentPeriod_1         string `json:"mT700_1_44DShipmentPeriod_1"`
	MT700_1_45ADescriptionofGoods       string `json:"mT700_1_45ADescriptionofGoods"`
	MT700_1_46ADocumentsRequiredCode_1  string `json:"mT700_1_46ADocumentsRequiredCode_1"`
	MT700_1_46ADocumentsRequired_1      string `json:"mT700_1_46ADocumentsRequired_1"`
	MT700_1_46ADocumentsRequired        string `json:"mT700_1_46ADocumentsRequired"`
	MT700_1_47AAdditionalConditions_1   string `json:"mT700_1_47AAdditionalConditions_1"`
	MT700_1_47AAdditionalConditions     string `json:"mT700_1_47AAdditionalConditions"`
	MT700_1_71BCharges                  int    `json:"mT700_1_71BCharges"`
	MT700_1_48PeriodforPresentation     string `json:"mT700_1_48PeriodforPresentation"`
	MT700_1_49ConfirmationInstructions  string `json:"mT700_1_49ConfirmationInstructions"`
	MT700_1_53aAReimbursingBank         string `json:"mT700_1_53aAReimbursingBank"`
	MT700_1_53aDReimbursingBank_1       string `json:"mT700_1_53aDReimbursingBank_1"`
	MT700_1_78InstructionstotheBank     string `json:"mT700_1_78InstructionstotheBank"`
	MT700_1_57aAAdviseThroughBank       string `json:"mT700_1_57aAAdviseThroughBank"`
	MT700_1_57aDAdviseThroughBank_1     string `json:"mT700_1_57aDAdviseThroughBank_1"`
	MT700_1_72SendertoReceiverInfo_1    string `json:"mT700_1_72SendertoReceiverInfo_1"`
	MT740_MT740SenttoBankId             string `json:"mT740_MT740SenttoBankId"`
	MT740_MT740SenttoBankName           string `json:"mT740_MT740SenttoBankName"`
	MT740_SendMT740withLC               string `json:"mT740_SendMT740withLC"`
	MT740_20Docy_CreditNumber           string `json:"mT740_20Docy_CreditNumber"`
	MT740_25AccountIdentification       string `json:"mT740_25AccountIdentification"`
	MT740_31DDateofExpiry               string `json:"mT740_31DDateofExpiry"`
	MT740_31DPlaceofExpiry              string `json:"mT740_31DPlaceofExpiry"`
	MT740_58aADNegotiatingBank_1        string `json:"mT740_58aADNegotiatingBank_1"`
	MT740_59Beneficiary                 string `json:"mT740_59Beneficiary"`
	MT740_59Beneficiary_1               string `json:"mT740_59Beneficiary_1"`
	MT740_32BLCCurrency                 string `json:"mT740_32BLCCurrency"`
	MT740_39ACreditTolerance            string `json:"mT740_39ACreditTolerance"`
	MT740_39ADebitTolerance             string `json:"mT740_39ADebitTolerance"`
	MT740_39BMaximumCreditAmt           int    `json:"mT740_39BMaximumCreditAmt"`
	MT740_39CAddlAmountsCovered_1       int    `json:"mT740_39CAddlAmountsCovered_1"`
	MT740_40FApplicableRuleCodes        string `json:"mT740_40FApplicableRuleCodes"`
	MT740_41aAAvailableWith             string `json:"mT740_41aAAvailableWith"`
	MT740_41aDAvailablewith_1           string `json:"mT740_41aDAvailablewith_1"`
	MT740_42CDraftsat_1                 string `json:"mT740_42CDraftsat_1"`
	MT740_42aADrawee                    string `json:"mT740_42aADrawee"`
	MT740_42aDDrawee_1                  string `json:"mT740_42aDDrawee_1"`
	MT740_42MMixedPaymentDetails_1      string `json:"mT740_42MMixedPaymentDetails_1"`
	MT740_42PDeferredPaymentDetails_1   string `json:"mT740_42PDeferredPaymentDetails_1"`
	MT740_71AReimbursingBankCharges     string `json:"mT740_71AReimbursingBankCharges"`
	MT740_71BOtherCharges_1             int    `json:"mT740_71BOtherCharges_1"`
	MT740_72SendertoReceiverInfo_1      string `json:"mT740_72SendertoReceiverInfo_1"`
	Status                              string `json:"status"`
	TransactionId                       string `json:"transactionId"`
	
}
type errorMessages struct{
	FieldName      string `json:"fieldName"`
	ErrMsg         string `json:"errMsg"`
}

type storeImage struct{
DocID								string        `json:"docID"`
DocType 					    	string        `json:"docType"`
DocContent 					    	string        `json:"docContent"`
LcId           						string        `json:"lcId"`
}


func (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {

	var err error

	var empty []string
	jsonAsBytes, _ := json.Marshal(empty)
	err = stub.PutState(LCID, jsonAsBytes)

	if err != nil {
		return nil, err
	}

	return nil, nil

}

func (t *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {

	if function == "OpenLetterOfCredit" {
		// creates an entity from its state
		return t.OpenLetterOfCredit(stub, args)
	}
	if function == "UpdateStatus" {
		// updates an entity from its state
		return t.UpdateStatus(stub, args)
	}
	if function == "UpdateTransactionId" {
		// updates an entity from its state
		return t.UpdateTransactionId(stub, args)
	}
	if function == "storeImageDetial" {
		// updates an image from its state
		return t.storeImageDetial(stub, args)
	}
	
	return nil, nil
}

func (t *SimpleChaincode) Query(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {
	if function == "GetLcById" {
		// creates an entity from its state
		return t.GetLcById(stub, args)
	}
	if function == "GetAllLC" {
		// creates an entity from its state
		return t.GetAllLC(stub, args)
	}
	if function == "Validation" {
		// creates an entity from its state
		return t.Validation(stub, args)
	}
	if function == "GetImageDetialById" {
		// creates an image from its state
		return t.GetImageDetialById(stub, args)
	}
	
	return nil, nil
}
//code for validation

func (t *SimpleChaincode) Validation(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering Validation")
	var err error
	
	var errormessages string
	
	if len(args) < 1 {
		logger.Error("Invalid number of args")
		return nil, errors.New("Expected one argument for letter of credit creation")
	}

	//var lcId = args[0]
	var lcInput = args[0]

	locObj := LetterOfCredit{}
	err = json.Unmarshal([]byte(lcInput), &locObj)
	fmt.Println("locObj object in validation====>  ", locObj)
	
	fmt.Println("locObj.LcIssueDate object in validation====>  ", locObj.LCIssueDate_t1 )
	
	//Expiry Date validation start
	issueDate, err := time.Parse("01/02/2006",locObj.LCIssueDate_t1 )
	issueDateInc := issueDate.AddDate(1,0,0)
	fmt.Println("issueDateInc",issueDateInc)
	
	expiryDate, err := time.Parse("01/02/2006",locObj.LCExpiryDate_t1 )
	fmt.Println("expiryDate  ",expiryDate)
	 if expiryDate.Before(issueDateInc);expiryDate.After(issueDate){
        locObj.LCExpiryDate_t1 = locObj.LCExpiryDate_t1
    } else {	
	
	msg := errorMessages{FieldName:"LCExpiryDate_t1",ErrMsg:"LC Expiry date should not be more than 1 year from the LC Issue date and should be greater than issue date"}
	msgbytes, _ := json.Marshal(msg)
	errormessages = errormessages + string(msgbytes)//append(errormessages,msg1)	
	//return []byte(errormessages),nil
    }
	//end
	// validation on shipment date
	shipmentDate,err := time.Parse("01/02/2006",locObj.ShipmentDate_t1 )
	expDatedec := expiryDate.AddDate(0,0,-21)
	fmt.Println("expDatedec",expDatedec)
	if shipmentDate.Before(expDatedec){
	locObj.ShipmentDate_t1 = locObj.ShipmentDate_t1
	}else{
	msg1 := errorMessages{FieldName:"ShipmentDate_t1",ErrMsg:"Latest shipment Date should be 21 days before the LC Expiry date"}	
	msgbytes1, _ := json.Marshal(msg1)
	errormessages = errormessages + string(msgbytes1)
	}
	//end	
	

	var customEvent = "{eventType: 'Letter of credit', description:" + locObj.LcId + "' Successfully created'}"
	err = stub.SetEvent("evtSender", []byte(customEvent))
	if err != nil {
		return nil, err
	}
	logger.Info("Successfully requested a Letter of credit")
	
if errormessages != ""{
	return []byte(errormessages),nil
	}else {
	s1, _ := json.Marshal(locObj)
	return []byte(s1), nil

	}

}
//Modification starts

func (t *SimpleChaincode) OpenLetterOfCredit(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering OpenLetterOfCredit")

	if len(args) < 2 {
		logger.Error("Invalid number of args")
		return nil, errors.New("Expected atleast two arguments for letter of credit creation")
	}

	var lcId = args[0]
	var lcInput = args[1]

	//storing the Lc IDs

	LCIDAsBytes, err := stub.GetState(LCID)
	if err != nil {
		return nil, errors.New("Failed to get Student IDs")
	}

	var LCIDs []string
	json.Unmarshal(LCIDAsBytes, &LCIDs)
	fmt.Println("LCIDs  ", LCIDs)

	//store and append the index to LCIDs

	LCIDs = append(LCIDs, args[0])
	fmt.Println("LCIDs array: ", LCIDs)

	LCIdArrayAsBytes, _ := json.Marshal(LCIDs)
	err = stub.PutState(LCID, LCIdArrayAsBytes)

	//END

	locObj := LetterOfCredit{}
	err = json.Unmarshal([]byte(lcInput), &locObj)
	fmt.Println("locObj object====>  ", locObj)

	s1, _ := json.Marshal(locObj)

	err = stub.PutState(lcId, []byte(s1))
	if err != nil {
		logger.Error("Could not save letter of credit to ledger", err)
		return nil, err
	}

	var customEvent = "{eventType: 'Letter of credit', description:" + lcId + "' Successfully created'}"
	err = stub.SetEvent("evtSender", []byte(customEvent))
	if err != nil {
		return nil, err
	}
	logger.Info("Successfully requested a Letter of credit")

	return nil, nil

}

func (t *SimpleChaincode) GetLcById(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering GetLcById")

	if len(args) < 1 {
		logger.Error("Invalid number of arguments")
		return nil, errors.New("Missing LC ID")
	}

	var lcId = args[0]
	bytes, err := stub.GetState(lcId)
	if err != nil {
		logger.Error("Could not fetch letter of credit with id "+lcId+" from ledger", err)
		return nil, err
	}
	return bytes, nil
}

func (t *SimpleChaincode) GetAllLC(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering GetAllLC")

	var jsonRespAll string
	var data []byte
	var IDs []string
	var LcArrayAsBytes []byte

	IDAsBytes, err := stub.GetState(LCID)
	if err != nil {
		//return fail, errors.New("Failed to get math index")
	}
	json.Unmarshal(IDAsBytes, &IDs)
	fmt.Println("IDAsBytes :", IDs)

	for i := range IDs {
		fmt.Println("IDs :", IDs[i])
		var ID = IDs[i]
		LcArrayAsBytes, err = stub.GetState(ID)
		if err != nil {
			fmt.Println("error in fetching record")
			//return fail, errors.New("Failed to get ")
		}

		res := LetterOfCredit{}
		json.Unmarshal(LcArrayAsBytes, &res)
		//fmt.Println("res data:", res)
		s1, _ := json.Marshal(res)

		jsonRespAll = jsonRespAll + string(s1)
		fmt.Println("jsonRespAll   " + jsonRespAll)

		data = []byte(jsonRespAll)

	}
	return data, nil

}


func (t *SimpleChaincode) UpdateStatus(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering UpdateStatus")
	if len(args) < 2 {
		logger.Error("Invalid number of arguments")
		return nil, errors.New("Missing LC ID")
	}

	var lcid = args[0]
	var status = args[1]
	bytes, err := stub.GetState(lcid)
	if err != nil {
		logger.Error("Could not fetch letter of credit with id "+lcid+" from ledger", err)
		return nil, err
	}
	loc := LetterOfCredit{}
	json.Unmarshal(bytes, &loc)
	fmt.Println("loc data:", loc)
	loc.Status = status
	fmt.Println("loc data after status change:", loc)
	s2, _ := json.Marshal(loc)

	err = stub.PutState(lcid, s2)
	if err != nil {
		logger.Error("Could not save letter of credit to ledger", err)
		return nil, err
	}

	return nil, nil
}



func (t *SimpleChaincode) UpdateTransactionId(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering UpdateTransactionId")
	if len(args) < 2 {
		logger.Error("Invalid number of arguments")
		return nil, errors.New("Missing LC ID")
	}

	var lcid = args[0]
	var TransId = args[1]
	bytes, err := stub.GetState(lcid)
	if err != nil {
		logger.Error("Could not fetch letter of credit with id "+lcid+" from ledger", err)
		return nil, err
	}
	loc := LetterOfCredit{}
	json.Unmarshal(bytes, &loc)
	fmt.Println("loc data:", loc)
	loc.TransactionId = TransId
	fmt.Println("loc data after TransId change:", loc)
	s2, _ := json.Marshal(loc)

	err = stub.PutState(lcid, s2)
	if err != nil {
		logger.Error("Could not save letter of credit to ledger", err)
		return nil, err
	}

	return nil, nil
}


  func (t *SimpleChaincode) storeImageDetial(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering storeImageDetial")

	//if len(args) < 2 {
//		logger.Error("Invalid number of args")
//		return nil, errors.New("Expected atleast two arguments for loan application update")
//	}

	var lcId = args[0]
	fmt.Println("amended data from UI====>  ",args[1])
	

//	lcAmendBytes, err := stub.GetState(lcId)
//	if err != nil {
//		logger.Error("Could not fetch LC from ledger for amending", err)
//		return nil, err
//	}
	
    storeImageDetialValue := storeImage{}
	json.Unmarshal([]byte(args[1]), &storeImageDetialValue) 
	fmt.Println("====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ")
	//fmt.Println("imageDetails====>  ",imageDetails)
	//fmt.Println("====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ")
	fmt.Println("amended object====>  ",storeImageDetialValue)
	fmt.Println("====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ")
	//amendLoc := storeImage{}
	//err = json.Unmarshal(lcAmendBytes, &amendLoc)
	
	//amendLoc.AmendArray = append(amendLoc.AmendArray, amendObjOld)

//	fmt.Println("====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ")
//	fmt.Println("after forming state to store amendLoc====>  ",amendLoc)
	//fmt.Println("====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ====>  ")
	
	ImageAsBytes, err := json.Marshal(&storeImageDetialValue)
	if err != nil {
		logger.Error("Could not marshal loan application post update", err)
		return nil, err
	}

	err = stub.PutState(lcId, ImageAsBytes)
	if err != nil {
		logger.Error("Could not save ImageAsBytes", err)
		return nil, err
	}

	logger.Info("Successfully saved Image")
	return nil, nil
}

func (t *SimpleChaincode) GetImageDetialById(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	logger.Debug("Entering GetImageDetialById")

	if len(args) < 1 {
		logger.Error("Invalid number of arguments")
		return nil, errors.New("Missing Image ID")
	}

	var imgID = args[0]
	bytes, err := stub.GetState(imgID)
	if err != nil {
		logger.Error("Could not fetch letter of credit with id "+imgID+" from ledger", err)
		return nil, err
	}
	return bytes, nil
}

//END HERE

func main() {
	err := shim.Start(new(SimpleChaincode))
	if err != nil {
		fmt.Printf("Error starting Simple chaincode: %s", err)
	}
}
